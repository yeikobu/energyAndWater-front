---
//Iconos
import CrossIcon from "../../public/icons/CrossIcon.astro"

//Componentes
import SectionTitle from "./SectionTitle.astro"

import { getServices } from "../api/services"


//Este array almacena los servicios a renderizar en el html
let services = []

/**
*	Obteniendo los servicios de la API y guardándolos en el array de services para luego mostrarlos
*/
async function loadServices() {
  try {
    services = await getServices('http://localhost/energyandwater/controller/ServicesController.php');
  } catch (error) {
    console.error(error)
  } 
}

await loadServices()
---

<section id="formSectionContainer" class="bg-slate-950/80 content-center hidden fixed h-screen top-0 bottom-0 left-0 right-0 space-y-4 z-40 backdrop-blur-md">
    <div id="fullFrom" class="bg-slate-950 transition-all ease-in-out duration-150 translate-y-full flex flex-col items-center justify-center m-auto p-8 rounded-xl sm:w-[300px] md:w-[500px] lg:-w[800px]">
        <!--Botón de cierre -->
        <button id="closeButton" class="self-end rounded-lg transition-all p-1 hover:scale-110 hover:bg-red-600/40">
            <CrossIcon class="text-stone-200 size-8"/>
        </button>
        <img src="/logo.jpeg" alt="Logo de Energy and Water" class="size-36 rounded-full">
        <SectionTitle title="Contáctanos"/>
    
        <!-- Inicio del formulario como tal -->
        <form action="" id="form" method="post" class="flex flex-col justify-start pt-10 space-y-4 w-full">
            <!--Campo del nombre -->
            <div class="flex flex-col">
                <label class="text-stone-200 font-bold">Nombre completo</label>
                <input type="text" id="fullName" placeholder="Ingrese su nombre completo" class="rounded-lg p-2"> 
                <label id="nameError" class="text-red-700 text-sm">X El nombre no puede estar vacío</label>
            </div>

            <div class="flex flex-col">
                <label class="text-stone-200 font-bold">Correo electrónico</label>
                <input type="email" id="email" placeholder="Ingrese su correo electrónico" class="rounded-lg p-2"> 
                <label id="emailError" class="text-red-700 text-sm">X El correo electrónico no puede estar vacío</label>
            </div>
    
            <!-- select con cada uno de los servicios a seleccionar-->
            <div class="flex flex-col">
                <label class="text-stone-200 font-bold">Servicio a consultar</label>
                <select name="Servicios" id="services" class="services rounded-lg p-2">
                    <!--Cargando los servicios desde la API-->
                    {services.map((service) => (
                        <option value={service.vch_service_name}>{service.vch_service_name}</option>
                    ))}
                </select>
            </div>
    
            <div class="flex flex-col">
                <label class="text-stone-200 font-bold">Mensaje</label>
                <textarea name="" id="message" class="text-input-message rounded-lg p-2" cols="34" rows="5" placeholder="Ingrese su mensaje indicando su pregunta"></textarea>
                <label id="messageError" class="text-red-700 text-sm">El campo de mensaje no puede estar vacío</label>
            </div>
    
            <input type="submit" id="sendForm" value="Enviar formulario de contacto" class="hidden bg-red-600/40 shadow-md shadow-black text-stone-300 rounded-full gap-x-2 py-2 px-4 md:py-2 md:px-4 text-sm md:text-base transition font-bold  hover:scale-110 hover:bg-red-600/60 cursor-pointer">
        </form>
    </div>
    <div id="formSubmitted" class=""> 
        
    </div>
</section>

<!-- 
    Profe, no sé si usted ha usado Astro, pero aquí quiero explicarle que el script de abajo es porque Astro por defecto intenta usar el mínimo
    JS posible del lado del cliente. Todo el JS del lado del servidor es el que está al inicio de documento entre los '---', y eso hace que los elementos no puedan ser modificados por el cliente.
    Ahora, si queremos agregar que los elementos cambien en el cliente podemos usar las 'Islas' que es todo lo que está en <script> (También se podrían usar otros frameworks para agregar reactividad a esto,
        como Preact, React, Vue, svelte, etc. Ya que Astro es agnóstico a la UI)
-->
<script>
    //Importamos el átomo (estado) que queremos manejar para poder controlar si se ve o no el formulario
    import { isContctUsFormOpen } from '../store.js';

    //Referencias de los elementos del DOM con relación a ocultar el formulario
    const formSectionContainer = document.getElementById('formSectionContainer')
    const fullForm = document.getElementById('fullFrom')
    const closeButton = document.getElementById('closeButton')

    //Referencias de los elementos del DOM con relación a validar los campos del formulario
    const name = document.getElementById('fullName')
    const email = document.getElementById('email')
    const services = document.getElementById('services')
    const message = document.getElementById('message')
    const button = document.getElementById('sendForm')

    /**
	*	Función que se encarga de mostrar un mensaje de error si el campo de nombre está vacío
	*/
    const checkName = () => { 
        if (name.value !== "") { 
            document.getElementById('nameError').classList.add('hidden')
        } else { 
            document.getElementById('nameError').classList.remove('hidden')
        }
    }

    const checkEmail = () => { 
        if (email.value !== "") { 
            document.getElementById('emailError').classList.add('hidden')
        } else { 
            document.getElementById('emailError').classList.remove('hidden')
        }
    }

    const checkMessage = () => { 
        if (message.value !== "") { 
            document.getElementById('messageError').classList.add('hidden')
        } else { 
            document.getElementById('messageError').classList.remove('hidden')
        }
    }

    const checkAllFields = () => { 
        if (name.value !== "" && email.value !== "" && message.value !== "") { 
            button.classList.remove('hidden')
        } else { 
            button.classList.add('hidden')
        }
    }

     //Escucnando todos los eventos de tipo input en los campos para mostrar u ocultar los errores
    name.addEventListener('input', checkName)
    name.addEventListener('input', checkAllFields)
    email.addEventListener('input', checkEmail)
    email.addEventListener('input', checkAllFields)
    message.addEventListener('input', checkMessage)
    message.addEventListener('input', checkAllFields)

    const sendForm = () => { 
        console.log('Nombre: ', name.value)
        console.log('Email: ', email.value)
        console.log('Servicio seleccionado: ', services.value)
        console.log('Mensaje:', message.value)
    }

    button.addEventListener('click', sendForm)

    /**
	*	Función que se encarga de ejecutar el cambio de estado para poder cerrar el formulario
	*/
    const handleFormOpen = () => { 
        isContctUsFormOpen.set(false)
    }

    // Escucha los cambios en el átomo(estado) del store y muestra/oculta el diálogo en consecuencia
    isContctUsFormOpen.subscribe(open => {
        if (open) {
            formSectionContainer.classList.remove('hidden')
            setTimeout(() => {
                fullForm.classList.remove('translate-y-full')
                fullForm.classList.add('translate-y-0')
            }, 1)
        } else {
            fullForm.classList.remove('translate-y-0')
            fullForm.classList.add('translate-y-full')
            setTimeout(() => {
                formSectionContainer.classList.add('hidden')
            }, 100)
        }
    })

    //El botón de cerrar cierra el formulario
    closeButton.addEventListener('click' , handleFormOpen)
</script>