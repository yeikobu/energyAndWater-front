---
//Iconos
import CheckIcon from "../../public/icons/CheckIcon.astro"

//Componentes
import SectionTitle from "../components/SectionTitle.astro"
import Layout from "../layouts/Layout.astro"

//Importando la función para obtner los servicios desde la API
import { getServices } from "../api/services"


//Este array almacena los servicios a renderizar en el html
let services = []

/**
*	Obteniendo los servicios de la API y guardándolos en el array de services para luego mostrarlos
*/
const loadServices = async () => {
  try {
    services = await getServices('http://localhost/energyandwater/controller/ServicesController.php');
  } catch (error) {
    console.error(error)
  } 
}

await loadServices()
---
<Layout> 
    <main class="block m-auto pt-24 px-6 max-w-[700px]">
        <section>
            <div id="fullFrom" class="bg-slate-950/40 flex flex-col items-center rounded-2xl shadow-lg shadow-black backdrop-blur-xl p-6 m-auto">
                <img src="/logo.jpeg" alt="Logo de Energy and Water" class="size-32 mb-5 object-fill rounded-full">
                <SectionTitle title="Contáctanos"/>
                
                <!-- Inicio del formulario como tal -->
                <form id="form" method="post" class="flex flex-col justify-start pt-10 gap-4 space-y-4 w-full">
                    <!--Campo del nombre -->
                    <div class="flex flex-col">
                        <p class="text-stone-300 font-bold">Nombre completo</p>
                        <input type="text" id="fullName" placeholder="Ingrese su nombre completo" class="text-stone-300 rounded-lg p-2 bg-slate-900/20 shadow-sm shadow-black backdrop-blur-xl"> 
                        <p id="nameError" class="text-red-900 text-xs">El nombre no puede estar vacío</p>
                    </div>
        
                    <!--Campo del correo electrónico -->
                    <div class="flex flex-col">
                        <p class="text-stone-300 font-bold">Correo electrónico</p>
                        <input type="email" id="email" placeholder="Ingrese su correo electrónico" class="text-stone-300 rounded-lg p-2 bg-slate-900/20 shadow-sm shadow-black backdrop-blur-xl"> 
                        <p id="emailError" class="text-red-900 text-sm">El correo electrónico no puede estar vacío</p>
                    </div>

                     <!--Campo de la dirección-->
                     <div class="flex flex-col">
                        <p class="text-stone-300 font-bold">Dirección</p>
                        <input type="text" id="address" placeholder="Ingrese su dirección. Ej: Las calilas 123, Lo Espejo" class="text-stone-400 rounded-lg p-2 bg-slate-900/20 shadow-sm shadow-black backdrop-blur-xl"> 
                        <p id="addressError" class="text-red-900 text-sm">La dirección no puede estar vacía</p>
                    </div>
            
                    <!--Select con cada uno de los servicios a seleccionar-->
                    <div class="flex flex-col">
                        <p class="text-stone-300 font-bold">Servicio a consultar</p>
                        <select name="Servicios" id="selectServices" class="text-stone-300 rounded-lg p-2 bg-slate-900/20 shadow-sm shadow-black backdrop-blur-xl">
                            <!--Cargando los servicios que fueron traídos desde la API-->
                            {services.map((service) => (
                                <option value={service.vch_service_name} >{service.vch_service_name}</option>
                            ))}
                        </select>
                    </div>
            
                    <!--Text area del mensaje -->
                    <div class="flex flex-col">
                        <p class="text-stone-300 font-bold">Mensaje</p>
                        <textarea name="" id="message" class="text-stone-300 rounded-lg p-2 bg-slate-900/20 shadow-sm shadow-black backdrop-blur-xl" cols="34" rows="5" placeholder="Ingrese su mensaje indicando su pregunta"></textarea>
                        <p id="messageError" class="text-red-900 text-sm">El mensaje no puede estar vacío</p>
                    </div>

                    <!--Input de los términos y condiciones -->
                    <div id="termsAndConditionsContainer" class="flex space-x-2">
                        <input type="checkbox" name="Términos y condiciones de uso" id="termsAndConditions">
                        <p class="text-stone-300 text-sm underline">Acepto los términos y condiciones</p>
                    </div>
            
                    <!--Botón para enviar el formulario -->
                    <input type="submit" id="sendForm" value="Enviar formulario de contacto" class="hidden bg-red-600/30 hover:bg-red-600/60 shadow-sm shadow-black backdrop-blur-md text-stone-300 rounded-xl py-3 md:py-3 mx-6 text-sm md:text-base transition font-bold hover:scale-110 cursor-pointer">
                </form>
            </div>
        </section>

        <!--Mensaje de que el formulario se envió correctamente -->
        <div id="formSubmittedPopUp" class="transition fixed scale-0 duration-300 translate-x-[0%] md:translate-x-1/2 md:-translate-y-[400%] -translate-y-[700px] bg-slate-950 shadow-lg shadow-black rounded-xl m-4 p-6"> 
            <div class="flex flex-col items-center">
                <h2 class="text-lg text-white font-bold">Mensaje enviado satisfactoriamente</h2>
                <CheckIcon class="text-green-500 size-11"/>
            </div>
        </div>
    </main>
</Layout>


<!-- 
    Profe, no sé si usted ha usado Astro, pero aquí quiero explicarle que el script de abajo es porque Astro por defecto intenta usar el mínimo
    JS posible del lado del cliente. Todo el JS del lado del servidor es el que está al inicio de documento entre los '---', y eso hace que los elementos no puedan ser modificados por el cliente.
    Ahora, si queremos agregar que los elementos cambien en el cliente podemos usar las 'Islas' que es todo lo que está en <script> (También se podrían usar otros frameworks para agregar reactividad a esto,
        como Preact, React, Vue, svelte, etc. Ya que Astro es agnóstico a la UI)
-->
<script>
    //Referencias de los elementos del DOM con relación a validar los campos del formulario
    const name = document.getElementById('fullName')
    const email = document.getElementById('email')
    const address = document.getElementById('address')
    const message = document.getElementById('message')
    const termsAndConditionsContainer = document.getElementById('termsAndConditionsContainer')
    const termsAndConditions = document.getElementById('termsAndConditions')
    const button = document.getElementById('sendForm')
    const form = document.getElementById('form')

    /**
     * Muestra un mensaje de error si el input de nombre está vacío
     */
    const checkName = () => { 
        if ((name as HTMLInputElement).value !== "") { 
            document.getElementById('nameError').classList.add('hidden')
        } else { 
            document.getElementById('nameError').classList.remove('hidden')
        }
    }

    /**
     * Muestra un mensaje de error si el input de email está vacío
     */
    const checkEmail = () => { 
        if ((email as HTMLInputElement).value !== "") { 
            document.getElementById('emailError').classList.add('hidden')
        } else { 
            document.getElementById('emailError').classList.remove('hidden')
        }
    }

     /**
     * Muestra un mensaje de error si el input de dirección está vacío
     */
     const checkAddress = () => { 
        if ((address as HTMLInputElement).value !== "") { 
            document.getElementById('addressError').classList.add('hidden')
        } else { 
            document.getElementById('addressError').classList.remove('hidden')
        }
    }

   /**
    * Muestra un mensaje de error si el campo de mensaje está vacío
    */ 
    const checkMessage = () => { 
        if ((message as HTMLInputElement).value !== "") { 
            document.getElementById('messageError').classList.add('hidden')
        } else { 
            document.getElementById('messageError').classList.remove('hidden')
        }
    }

     /**
	*	Función que se encarga de mostrar el botón de enviar formulario si todos los campos están completos
	*/
    const checkAllFields = () => { 
        if ((name as HTMLInputElement).value !== "" && (email as HTMLInputElement).value !== "" && (message as HTMLInputElement).value !== "" && (address as HTMLInputElement).value !== "" && (termsAndConditions as HTMLInputElement).checked) { 
            button.classList.remove('hidden')
        } else { 
            button.classList.add('hidden')
        }
    }

    //Escucnando todos los eventos de tipo input en los campos para mostrar u ocultar los errores
    name.addEventListener('input', checkName)
    name.addEventListener('input', checkAllFields)
    email.addEventListener('input', checkEmail)
    email.addEventListener('input', checkAllFields)
    address.addEventListener('input', checkAddress)
    address.addEventListener('input', checkAllFields)
    message.addEventListener('input', checkMessage)
    message.addEventListener('input', checkAllFields)
    termsAndConditions.addEventListener('change', checkAllFields)

    //Envío del formulario 
    form.addEventListener('submit', (e) => {
        e.preventDefault()

        //Mostrando mensaje de que el formulario se envío satisfactoriamente
        document.getElementById("formSubmittedPopUp").classList.remove('scale-0')
        document.getElementById("formSubmittedPopUp").classList.add('scale-100')

        //Mostrando los valores del formulario por consola 
        console.log('Nombre: ', (name as HTMLInputElement).value)
        console.log('Email: ', (email as HTMLInputElement).value)
        console.log('Dirección', (address as HTMLInputElement).value)
        console.log('Servicio seleccionado: ', (document.getElementById('selectServices') as HTMLSelectElement).value);
        console.log('Mensaje:', (message as HTMLTextAreaElement).value);

        //Deshabilitando el botón de enviar formulario mientras se muestra el mensaje 
        button.classList.add('disabled')
        button.classList.remove('hover:scale-110')
        button.classList.remove('hover:bg-red-600/60')

        //Cerrando el formulario a los 3 segundos y setteando los inputs por defecto
        setTimeout(() => {
            (name as HTMLInputElement).value = '';
            (email as HTMLInputElement).value = '';
            (address as HTMLInputElement).value = '';
            (message as HTMLTextAreaElement).value = '';
            button.classList.remove('disabled')
            button.classList.add('hover:scale-110')
            button.classList.add('hover:bg-red-600/60')
            button.classList.add('hidden')
            document.getElementById('nameError').classList.remove('hidden')
            document.getElementById('emailError').classList.remove('hidden')
            document.getElementById('addressError').classList.remove('hidden')
            document.getElementById('messageError').classList.remove('hidden')
            document.getElementById("formSubmittedPopUp").classList.add('scale-0')
            document.getElementById("formSubmittedPopUp").classList.remove('scale-100')
        }, 3000);
    })

</script>